"use strict";
/**
 *  Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = require("@aws-cdk/assert");
const core_1 = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const events = require("@aws-cdk/aws-events");
const defaults = require("../index");
require("@aws-cdk/assert/jest");
const aws_events_1 = require("@aws-cdk/aws-events");
const core_2 = require("@aws-cdk/core");
const utils_1 = require("../lib/utils");
test('snapshot test EventsRuleProps default params', () => {
    const stack = new core_1.Stack();
    const lambdaFunctionProps = {
        runtime: lambda.Runtime.NODEJS_12_X,
        handler: 'index.handler',
        code: lambda.Code.fromAsset(`${__dirname}/lambda`)
    };
    const fn = defaults.deployLambdaFunction(stack, lambdaFunctionProps);
    const lambdaFunc = {
        bind: () => ({
            id: '',
            arn: fn.functionArn
        })
    };
    const defaultEventsRuleProps = defaults.DefaultEventsRuleProps([lambdaFunc]);
    const eventsRuleProps = utils_1.overrideProps(defaultEventsRuleProps, {
        schedule: aws_events_1.Schedule.rate(core_2.Duration.minutes(5))
    });
    new events.Rule(stack, 'Events', eventsRuleProps);
    expect(assert_1.SynthUtils.toCloudFormation(stack)).toMatchSnapshot();
});
test('test EventsRuleProps override ruleName and description', () => {
    const stack = new core_1.Stack();
    const lambdaFunc = {
        bind: () => ({
            id: '',
            arn: 'ARN'
        })
    };
    const defaultEventsRuleProps = defaults.DefaultEventsRuleProps([lambdaFunc]);
    const eventsRuleProps = utils_1.overrideProps(defaultEventsRuleProps, {
        ruleName: 'test',
        description: 'hello world',
        schedule: aws_events_1.Schedule.rate(core_2.Duration.minutes(5))
    });
    new events.Rule(stack, 'Events', eventsRuleProps);
    expect(stack).toHaveResource('AWS::Events::Rule', {
        Description: "hello world",
        Name: "test",
        ScheduleExpression: "rate(5 minutes)",
        State: "ENABLED",
        Targets: [
            {
                Arn: "ARN",
                Id: "Target0"
            }
        ]
    });
});
test('test EventsRuleProps add more event targets', () => {
    const stack = new core_1.Stack();
    const lambdaFunc1 = {
        bind: () => ({
            id: '',
            arn: 'ARN1'
        })
    };
    const defaultEventsRuleProps = defaults.DefaultEventsRuleProps([lambdaFunc1]);
    const lambdaFunc2 = {
        bind: () => ({
            id: '',
            arn: 'ARN2'
        })
    };
    const eventsRuleProps = utils_1.overrideProps(defaultEventsRuleProps, {
        targets: [lambdaFunc2],
        schedule: aws_events_1.Schedule.rate(core_2.Duration.minutes(5))
    }, true);
    new events.Rule(stack, 'Events', eventsRuleProps);
    expect(stack).toHaveResource('AWS::Events::Rule', {
        ScheduleExpression: "rate(5 minutes)",
        State: "ENABLED",
        Targets: [
            {
                Arn: "ARN1",
                Id: "Target0"
            },
            {
                Arn: "ARN2",
                Id: "Target1"
            }
        ]
    });
});
//# sourceMappingURL=data:application/json;base64,