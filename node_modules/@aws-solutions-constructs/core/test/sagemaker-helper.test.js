"use strict";
/**
 *  Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const iam = require("@aws-cdk/aws-iam");
const kms = require("@aws-cdk/aws-kms");
const ec2 = require("@aws-cdk/aws-ec2");
const defaults = require("../");
const assert_1 = require("@aws-cdk/assert");
require("@aws-cdk/assert/jest");
// --------------------------------------------------------------
// Test minimal deployment with no properties
// --------------------------------------------------------------
test('Test minimal deployment with no properties', () => {
    // Stack
    const stack = new core_1.Stack();
    const sagemakerRole = new iam.Role(stack, 'SagemakerRole', {
        assumedBy: new iam.ServicePrincipal('sagemaker.amazonaws.com'),
    });
    // Build Sagemaker Notebook Instance
    defaults.buildSagemakerNotebook(stack, {
        role: sagemakerRole,
    });
    // Assertion
    expect(assert_1.SynthUtils.toCloudFormation(stack)).toMatchSnapshot();
});
// --------------------------------------------------------------
// Test deployment with VPC
// --------------------------------------------------------------
test('Test deployment with VPC', () => {
    // Stack
    const stack = new core_1.Stack();
    const sagemakerRole = new iam.Role(stack, 'SagemakerRole', {
        assumedBy: new iam.ServicePrincipal('sagemaker.amazonaws.com'),
    });
    let sagemaker;
    let vpc;
    let sg;
    // Build Sagemaker Notebook Instance
    [sagemaker, vpc, sg] = defaults.buildSagemakerNotebook(stack, {
        role: sagemakerRole,
    });
    // Assertion
    expect(assert_1.SynthUtils.toCloudFormation(stack)).toMatchSnapshot();
    expect(vpc === null || vpc === void 0 ? void 0 : vpc.privateSubnets.length).toEqual(2);
    expect(vpc === null || vpc === void 0 ? void 0 : vpc.publicSubnets.length).toEqual(2);
    expect(sagemaker.instanceType).toEqual('ml.t2.medium');
    expect(sg).toBeInstanceOf(ec2.SecurityGroup);
});
// --------------------------------------------------------------
// Test deployment witout VPC
// --------------------------------------------------------------
test('Test deployment w/o VPC', () => {
    // Stack
    const stack = new core_1.Stack();
    const sagemakerRole = new iam.Role(stack, 'SagemakerRole', {
        assumedBy: new iam.ServicePrincipal('sagemaker.amazonaws.com'),
    });
    // Build Sagemaker Notebook Instance
    defaults.buildSagemakerNotebook(stack, {
        role: sagemakerRole,
        deployInsideVpc: false,
    });
    // Assertion
    expect(assert_1.SynthUtils.toCloudFormation(stack)).toMatchSnapshot();
});
// --------------------------------------------------------------
// Test deployment in existing VPC
// --------------------------------------------------------------
test('Test deployment w/ existing VPC', () => {
    // Stack
    const stack = new core_1.Stack();
    const sagemakerRole = new iam.Role(stack, 'SagemakerRole', {
        assumedBy: new iam.ServicePrincipal('sagemaker.amazonaws.com'),
    });
    // Build Sagemaker Notebook Instance
    defaults.buildSagemakerNotebook(stack, {
        role: sagemakerRole,
        deployInsideVpc: true,
        sagemakerNotebookProps: {
            subnetId: 'subnet-deadbeef',
            securityGroupIds: ['sg-deadbeef'],
        },
    });
    expect(stack).toHaveResource('AWS::SageMaker::NotebookInstance', {
        DirectInternetAccess: 'Disabled',
        SecurityGroupIds: ['sg-deadbeef'],
        SubnetId: 'subnet-deadbeef',
    });
});
// --------------------------------------------------------------
// Test deployment with override
// --------------------------------------------------------------
test('Test deployment w/ override', () => {
    // Stack
    const stack = new core_1.Stack();
    const sagemakerRole = new iam.Role(stack, 'SagemakerRole', {
        assumedBy: new iam.ServicePrincipal('sagemaker.amazonaws.com'),
    });
    const key = new kms.Key(stack, 'MyEncryptionKey');
    // Build Sagemaker Notebook Instance
    defaults.buildSagemakerNotebook(stack, {
        role: sagemakerRole,
        sagemakerNotebookProps: {
            instanceType: 'ml.c4.2xlarge',
            kmsKeyId: key.keyArn,
        },
    });
    expect(stack).toHaveResource('AWS::SageMaker::NotebookInstance', {
        DirectInternetAccess: 'Disabled',
        InstanceType: 'ml.c4.2xlarge',
        KmsKeyId: {
            'Fn::GetAtt': ['MyEncryptionKeyD795679F', 'Arn'],
        },
    });
});
// ----------------------------------------------------------
// Test deployment with existing Sagemaker Notebook instance
// ----------------------------------------------------------
test('Test deployment with existing Sagemaker Notebook instance', () => {
    // Stack
    const stack = new core_1.Stack();
    const sagemakerRole = new iam.Role(stack, 'SagemakerRole', {
        assumedBy: new iam.ServicePrincipal('sagemaker.amazonaws.com'),
    });
    // Build Sagemaker Notebook Instance
    const [noteBookInstance] = defaults.buildSagemakerNotebook(stack, {
        role: sagemakerRole,
    });
    // Build Sagemaker Notebook Instance
    defaults.buildSagemakerNotebook(stack, {
        existingNotebookObj: noteBookInstance,
        role: sagemakerRole,
    });
    // Assertion
    expect(assert_1.SynthUtils.toCloudFormation(stack)).toMatchSnapshot();
});
// --------------------------------------------------------------
// Test exception
// --------------------------------------------------------------
test('Test exception', () => {
    // Stack
    const stack = new core_1.Stack();
    const sagemakerRole = new iam.Role(stack, 'SagemakerRole', {
        assumedBy: new iam.ServicePrincipal('sagemaker.amazonaws.com'),
    });
    expect(() => {
        // Build Sagemaker Notebook Instance
        defaults.buildSagemakerNotebook(stack, {
            role: sagemakerRole,
            deployInsideVpc: true,
            sagemakerNotebookProps: {
                subnetId: 'subnet-deadbeef',
            },
        });
    }).toThrowError();
});
// --------------------------------------------------------------------------------------
// Test minimal deployment of Sagemaker Inference Endpoint no VPC using internal IAM role
// --------------------------------------------------------------------------------------
test('Test minimal deployment with no properties using internal IAM role', () => {
    // Stack
    const stack = new core_1.Stack();
    // Build Sagemaker Inference Endpoint
    defaults.BuildSagemakerEndpoint(stack, {
        modelProps: {
            primaryContainer: {
                image: '<AccountId>.dkr.ecr.<region>.amazonaws.com/linear-learner:latest',
                modelDataUrl: 's3://<bucket-name>/<prefix>/model.tar.gz',
            },
        },
    });
    // Assertion
    expect(assert_1.SynthUtils.toCloudFormation(stack)).toMatchSnapshot();
});
// ----------------------------------------------------------------
// Test minimal deployment of Sagemaker Inference Endpoint with VPC
// ----------------------------------------------------------------
test('Test minimal deployment of Sagemaker Inference Endpoint with VPC', () => {
    // Stack
    const stack = new core_1.Stack();
    // create a VPC with required VPC S3 gateway and SAGEMAKER_RUNTIME Interface
    const vpc = defaults.buildVpc(stack, {
        defaultVpcProps: defaults.DefaultIsolatedVpcProps(),
        constructVpcProps: {
            enableDnsHostnames: true,
            enableDnsSupport: true,
        },
    });
    // Add S3 VPC Gateway Endpint, required by Sagemaker to access Models artifacts via AWS private network
    defaults.AddAwsServiceEndpoint(stack, vpc, defaults.ServiceEndpointTypes.S3);
    // Add SAGEMAKER_RUNTIME VPC Interface Endpint, required by the lambda function to invoke the SageMaker endpoint
    defaults.AddAwsServiceEndpoint(stack, vpc, defaults.ServiceEndpointTypes.SAGEMAKER_RUNTIME);
    // Build Sagemaker Inference Endpoint
    defaults.BuildSagemakerEndpoint(stack, {
        modelProps: {
            primaryContainer: {
                image: '<AccountId>.dkr.ecr.<region>.amazonaws.com/linear-learner:latest',
                modelDataUrl: 's3://<bucket-name>/<prefix>/model.tar.gz',
            },
        },
        vpc,
    });
    // Assertion
    expect(assert_1.SynthUtils.toCloudFormation(stack)).toMatchSnapshot();
});
// -------------------------------------------------------------------------
// Test deployment of Sagemaker Inference Endpoint with properties overwrite
// -------------------------------------------------------------------------
test('Test deployment of Sagemaker Inference Endpoint with properties overwrite', () => {
    // Stack
    const stack = new core_1.Stack();
    // create a VPC with required VPC S3 gateway and SAGEMAKER_RUNTIME Interface
    const vpc = defaults.buildVpc(stack, {
        defaultVpcProps: defaults.DefaultIsolatedVpcProps(),
        constructVpcProps: {
            enableDnsHostnames: true,
            enableDnsSupport: true,
        },
    });
    // Add S3 VPC Gateway Endpint, required by Sagemaker to access Models artifacts via AWS private network
    defaults.AddAwsServiceEndpoint(stack, vpc, defaults.ServiceEndpointTypes.S3);
    // Add SAGEMAKER_RUNTIME VPC Interface Endpint, required by the lambda function to invoke the SageMaker endpoint
    defaults.AddAwsServiceEndpoint(stack, vpc, defaults.ServiceEndpointTypes.SAGEMAKER_RUNTIME);
    // create encryption key
    const encryptionkey = new kms.Key(stack, 'MyEndpointConfigEncryptionKey');
    // Build Sagemaker Inference Endpoint
    defaults.BuildSagemakerEndpoint(stack, {
        modelProps: {
            modelName: 'linear-learner-model',
            primaryContainer: {
                image: '<AccountId>.dkr.ecr.<region>.amazonaws.com/linear-learner:latest',
                modelDataUrl: 's3://<bucket-name>/<prefix>/model.tar.gz',
            },
        },
        endpointConfigProps: {
            endpointConfigName: 'linear-learner-endpoint-config',
            productionVariants: [
                {
                    modelName: 'linear-learner-model',
                    initialInstanceCount: 1,
                    initialVariantWeight: 1.0,
                    instanceType: 'ml.m4.large',
                    variantName: 'AllTraffic',
                    acceleratorType: 'ml.eia2.medium',
                },
            ],
            kmsKeyId: encryptionkey.keyArn,
        },
        endpointProps: {
            endpointConfigName: 'linear-learner-endpoint-config',
            endpointName: 'linear-learner-endpoint',
        },
        vpc,
    });
    // Assertion
    expect(assert_1.SynthUtils.toCloudFormation(stack)).toMatchSnapshot();
});
// --------------------------------------------------------------
// Test deployment of existing Sagemaker Endpoint
// --------------------------------------------------------------
test('Test deployment of existing Sagemaker Endpoint', () => {
    // Stack
    const stack = new core_1.Stack();
    const [sagemakerEndpoint] = defaults.deploySagemakerEndpoint(stack, {
        modelProps: {
            primaryContainer: {
                image: '<AccountId>.dkr.ecr.<region>.amazonaws.com/linear-learner:latest',
                modelDataUrl: 's3://<bucket-name>/<prefix>/model.tar.gz',
            },
        },
    });
    // Build Sagemaker Inference Endpoint
    defaults.BuildSagemakerEndpoint(stack, {
        existingSagemakerEndpointObj: sagemakerEndpoint,
    });
    // Assertion
    expect(assert_1.SynthUtils.toCloudFormation(stack)).toMatchSnapshot();
});
// ------------------------------------------------------------------------
// Test deployment of sagemaker endpoint with a customer provided role
// ------------------------------------------------------------------------
test('Test deployment of sagemaker endpoint with a customer provided role', () => {
    // Stack
    const stack = new core_1.Stack();
    // Create IAM Role to be assumed by Sagemaker
    const sagemakerRole = new iam.Role(stack, 'SagemakerRole', {
        assumedBy: new iam.ServicePrincipal('sagemaker.amazonaws.com'),
    });
    sagemakerRole.addManagedPolicy(iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonSageMakerFullAccess'));
    // Build Sagemaker Inference Endpoint
    defaults.BuildSagemakerEndpoint(stack, {
        modelProps: {
            executionRoleArn: sagemakerRole.roleArn,
            primaryContainer: {
                image: '<AccountId>.dkr.ecr.<region>.amazonaws.com/linear-learner:latest',
                modelDataUrl: 's3://<bucket-name>/<prefix>/model.tar.gz',
            },
        },
    });
    // Assertion 1
    expect(assert_1.SynthUtils.toCloudFormation(stack)).toMatchSnapshot();
});
// ---------------------------------------------------------------
// Test exception for not providing primaryContainer in modelProps
// ---------------------------------------------------------------
test('Test exception for not providing primaryContainer in modelProps', () => {
    // Stack
    const stack = new core_1.Stack();
    const app = () => {
        // Build Sagemaker Inference Endpoint
        defaults.BuildSagemakerEndpoint(stack, {
            modelProps: {},
        });
    };
    // Assertion 1
    expect(app).toThrowError();
});
// -------------------------------------------------------------------------
// Test exception for not providing modelProps
// -------------------------------------------------------------------------
test('Test exception for not providing modelProps', () => {
    // Stack
    const stack = new core_1.Stack();
    const vpc = defaults.buildVpc(stack, {
        defaultVpcProps: defaults.DefaultIsolatedVpcProps(),
        constructVpcProps: {
            enableDnsHostnames: true,
            enableDnsSupport: true,
        },
    });
    const app = () => {
        // Build Sagemaker Inference Endpoint
        defaults.deploySagemakerEndpoint(stack, { vpc });
    };
    // Assertion 1
    expect(app).toThrowError();
});
// -------------------------------------------------------------------------
// Test exception for not providing modelProps or existingSagemkaerObj
// -------------------------------------------------------------------------
test('Test exception for not providing modelProps or existingSagemkaerObj', () => {
    // Stack
    const stack = new core_1.Stack();
    const vpc = defaults.buildVpc(stack, {
        defaultVpcProps: defaults.DefaultIsolatedVpcProps(),
        constructVpcProps: {
            enableDnsHostnames: true,
            enableDnsSupport: true,
        },
    });
    const app = () => {
        // Build Sagemaker Inference Endpoint
        defaults.BuildSagemakerEndpoint(stack, { vpc });
    };
    // Assertion 1
    expect(app).toThrowError();
});
// -----------------------------------------------------------------------------------------
// Test exception for not providing private or isolated subnets in an existing vpc
// -----------------------------------------------------------------------------------------
test('Test exception for not providing private or isolated subnets in an existing vpc', () => {
    // Stack
    const stack = new core_1.Stack();
    // create a VPC
    const vpc = defaults.buildVpc(stack, {
        defaultVpcProps: defaults.DefaultIsolatedVpcProps(),
        userVpcProps: {
            natGateways: 0,
            subnetConfiguration: [
                {
                    cidrMask: 18,
                    name: 'public',
                    subnetType: ec2.SubnetType.PUBLIC,
                },
            ],
        },
        constructVpcProps: {
            enableDnsHostnames: true,
            enableDnsSupport: true,
        },
    });
    const app = () => {
        // Build Sagemaker Inference Endpoint
        defaults.deploySagemakerEndpoint(stack, {
            modelProps: {
                primaryContainer: {
                    image: '<AccountId>.dkr.ecr.<region>.amazonaws.com/linear-learner:latest',
                    modelDataUrl: 's3://<bucket-name>/<prefix>/model.tar.gz',
                },
            },
            vpc,
        });
    };
    // Assertion 1
    expect(app).toThrowError();
});
//# sourceMappingURL=data:application/json;base64,